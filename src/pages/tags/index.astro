---
import { getCollection } from 'astro:content'
import Layout from '../../components/Layout.astro'
import Tag from '../../components/Tag.astro'
import { getUniqueTags, getTagSlug } from '../../utils/slug'

const allPosts = await getCollection('posts', ({ data }) => !data.draft)
const uniqueTags = getUniqueTags(allPosts)

// Count posts per tag
const tagCounts = uniqueTags.map(tag => {
  const count = allPosts.filter(post => 
    post.data.tags?.some(postTag => postTag.toLowerCase() === tag.toLowerCase())
  ).length
  return { tag, count }
}).sort((a, b) => b.count - a.count)
---

<Layout
  title="All Tags"
  description="Browse all blog post tags and topics. Find posts by category, technology, or subject matter."
>
  <div class="bg-white dark:bg-gray-900 min-h-screen">
    <!-- Header -->
    <div class="bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
      <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div class="max-w-4xl mx-auto text-center">
          <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
            All Tags
          </h1>
          <p class="text-xl text-gray-600 dark:text-gray-300">
            Explore topics and categories from our blog posts
          </p>
        </div>
      </div>
    </div>

    <!-- Tags Grid -->
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="max-w-4xl mx-auto">
        {tagCounts.length > 0 ? (
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {tagCounts.map(({ tag, count }) => (
              <a
                href={`/tags/${getTagSlug(tag)}`}
                class="group block p-6 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-moss-300 dark:hover:border-moss-600 hover:shadow-md transition-all duration-200"
              >
                <div class="flex items-center justify-between mb-2">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white group-hover:text-moss-600 dark:group-hover:text-moss-400 transition-colors">
                    {tag}
                  </h3>
                  <span class="text-sm text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">
                    {count} {count === 1 ? 'post' : 'posts'}
                  </span>
                </div>
                <p class="text-sm text-gray-600 dark:text-gray-300">
                  {count === 1 ? '1 post' : `${count} posts`} tagged with "{tag}"
                </p>
              </a>
            ))}
          </div>
        ) : (
          <div class="text-center py-12">
            <div class="max-w-md mx-auto">
              <svg class="w-16 h-16 mx-auto text-gray-400 dark:text-gray-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
                No tags found
              </h3>
              <p class="text-gray-500 dark:text-gray-400">
                There are no tags available yet.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</Layout>
