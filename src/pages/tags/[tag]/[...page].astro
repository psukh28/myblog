---
import { getCollection } from 'astro:content'
import Layout from '../../../components/Layout.astro'
import PostCard from '../../../components/PostCard.astro'
import Pagination from '../../../components/Pagination.astro'
import Tag from '../../../components/Tag.astro'
import { getSlugFromFilename, getTagSlug } from '../../../utils/slug'
import { getPaginationProps } from '../../../utils/pagination'
import { POSTS_PER_PAGE } from '../../../site.config'

export async function getStaticPaths() {
  const allPosts = await getCollection('posts', ({ data }) => !data.draft)
  const tagMap = new Map<string, typeof allPosts>()
  
  // Group posts by tag
  allPosts.forEach(post => {
    post.data.tags?.forEach(tag => {
      const normalizedTag = tag.toLowerCase()
      if (!tagMap.has(normalizedTag)) {
        tagMap.set(normalizedTag, [])
      }
      tagMap.get(normalizedTag)!.push(post)
    })
  })
  
  const paths = []
  
  for (const [tag, posts] of tagMap) {
    const sortedPosts = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE)
    
    // Add the first page without /1
    if (totalPages > 0) {
      paths.push({
        params: { 
          tag: getTagSlug(tag),
          page: undefined 
        },
        props: { 
          tag,
          currentPage: 1, 
          totalPosts: sortedPosts.length 
        }
      })
    }
    
    // Add numbered pages
    for (let i = 2; i <= totalPages; i++) {
      paths.push({
        params: { 
          tag: getTagSlug(tag),
          page: i.toString() 
        },
        props: { 
          tag,
          currentPage: i, 
          totalPosts: sortedPosts.length 
        }
      })
    }
  }
  
  return paths
}

const { tag, currentPage, totalPosts } = Astro.props
const allPosts = await getCollection('posts', ({ data }) => !data.draft)
const tagPosts = allPosts.filter(post => 
  post.data.tags?.some(postTag => postTag.toLowerCase() === tag.toLowerCase())
)
const sortedPosts = tagPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())

const pagination = getPaginationProps(currentPage, totalPosts, POSTS_PER_PAGE, `/tags/${getTagSlug(tag)}`)
const startIndex = (currentPage - 1) * POSTS_PER_PAGE
const endIndex = startIndex + POSTS_PER_PAGE
const posts = sortedPosts.slice(startIndex, endIndex)

const pageTitle = currentPage === 1 ? `Posts tagged "${tag}"` : `Posts tagged "${tag}" - Page ${currentPage}`
const pageDescription = currentPage === 1 
  ? `Browse all blog posts tagged with "${tag}".`
  : `Browse all blog posts tagged with "${tag}" - Page ${currentPage} of ${pagination.totalPages}`
---

<Layout
  title={pageTitle}
  description={pageDescription}
  canonical={currentPage === 1 ? `/tags/${getTagSlug(tag)}` : `/tags/${getTagSlug(tag)}/${currentPage}`}
>
  <div class="bg-white dark:bg-gray-900 min-h-screen">
    <!-- Header -->
    <div class="bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
      <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div class="max-w-4xl mx-auto">
          <!-- Breadcrumb -->
          <nav class="mb-6" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
              <li><a href="/" class="hover:text-moss-600 dark:hover:text-moss-400">Home</a></li>
              <li class="flex items-center">
                <svg class="w-4 h-4 mx-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
                <a href="/tags" class="hover:text-moss-600 dark:hover:text-moss-400">Tags</a>
              </li>
              <li class="flex items-center">
                <svg class="w-4 h-4 mx-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
                <span class="text-gray-900 dark:text-white">{tag}</span>
              </li>
            </ol>
          </nav>

          <!-- Title -->
          <div class="text-center">
            <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
              Posts tagged "{tag}"
            </h1>
            <p class="text-xl text-gray-600 dark:text-gray-300 mb-6">
              {totalPosts} {totalPosts === 1 ? 'post' : 'posts'} found
            </p>
            
            <!-- Tag display -->
            <div class="flex justify-center">
              <Tag name={tag} variant="accent" size="lg" />
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Posts Grid -->
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="max-w-6xl mx-auto">
        {posts.length > 0 ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {posts.map((post) => (
              <PostCard post={post} />
            ))}
          </div>
        ) : (
          <div class="text-center py-12">
            <div class="max-w-md mx-auto">
              <svg class="w-16 h-16 mx-auto text-gray-400 dark:text-gray-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
                No posts found
              </h3>
              <p class="text-gray-500 dark:text-gray-400">
                There are no posts available for this tag on this page.
              </p>
            </div>
          </div>
        )}

        <!-- Pagination -->
        {pagination.totalPages > 1 && (
          <div class="mt-12">
            <Pagination {...pagination} />
          </div>
        )}
      </div>
    </div>
  </div>
</Layout>
